fastlane_require 'semantic'

require 'pathname'


default_platform(:ios)

platform :ios do
  # SWIFT PACKAGE MANAGEMENT LANES
  ####################################################################################
  desc "Get project path and replace remote components with local"
  lane :sync_project_with_local_components do
    # Updates xcode package url
    remote_url =  ENV['REMOTE_COMPONENTS_URL']
    local_url = Pathname(Dir.pwd).dirname.to_s
    local_url = "file://" + local_url
    package_resolved_path = ENV['LOCAL_PROJECT_PATH'] + "/project.pbxproj"

    text = File.read(package_resolved_path)
    replaced_text = text.gsub(remote_url, local_url)

    File.open(package_resolved_path, "w") {|file| file.puts replaced_text }

    # Adds current remote tag to tag file
    tag_values_filename = ENV['TAG_FILE']
    File.open(tag_values_filename, "w") {|f| f.puts last_git_tag }

  end

  desc "Creates a development tag and updates projects using this swift package"
  lane :update_dependent_projects do
    local_url = Pathname(Dir.pwd).dirname.to_s
    local_url = "file://" + local_url
    package_resolved_path = ENV['LOCAL_PROJECT_PATH'] + "/project.pbxproj"

    last_local_tag = last_git_tag
    dev_tag = Time.now.to_i.to_s + ".0.0" # .0.0 is required for Xcode to solve the versioning
    sh("[[ -z $(git status -s) ]] || git commit -a -m 'development commit for " + dev_tag + "'")
    sh("git tag " + dev_tag)

    # Updates Swift Package Manifest
    text = File.read(package_resolved_path)
    replaced_text = text.gsub(last_local_tag, dev_tag)
    File.open(package_resolved_path, "w") {|file| file.puts replaced_text }

    # Stores tags in file for use later
    tag_values_filename = ENV['TAG_FILE']
    File.open(tag_values_filename, "a") {|f| f.write("\n" + dev_tag) }

  end

  desc "Reset dependent projects to remote URL"
  lane :reset_dependent_projects do 
    remote_url =  ENV['REMOTE_COMPONENTS_URL']
    local_url = Pathname(Dir.pwd).dirname.to_s
    local_url = "file://" + local_url
    package_resolved_path = ENV['LOCAL_PROJECT_PATH'] + "/project.pbxproj"

    tag_values_filename = ENV['TAG_FILE']
    tag_values = File.readlines(tag_values_filename)

    text = File.read(package_resolved_path)
    replaced_text = text.gsub(local_url, remote_url)
    replaced_text = replaced_text.gsub(tag_values.last, tag_values.first.gsub("\n", ""))

    File.open(package_resolved_path, "w") {|file| file.puts replaced_text }

    tag_values.drop(1).each { |x| sh("git tag -d " + x) }

    sh("rm " + tag_values_filename)
  end

  # GENERAL DEVELOPMENT LANES
  ####################################################################################
  desc "This will sync adhoc certificates to allow the companion app to build on CI"
  lane:sync_certificates do 
    syncAdhocCerts()
  end

  def syncAdhocCerts(force_for_new_devices=false)
    match(
      app_identifier: ["uk.gov.hmrc.ngc.UIComponentsTestApp"],
      type: "adhoc",
      readonly: !force_for_new_devices,
      force_for_new_devices: force_for_new_devices
    )
  end

  desc "Build adhoc app for testing"
  lane :build_adhoc_app do |options| 
    syncAdhocCerts()
    gym(
      project: options[:project_path],
      configuration: "Debug",
      export_method: "ad-hoc",
      output_directory: options[:output]
    )
  end

  desc "Register new devices"
    lane :register_new_device do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    syncAdhocCerts(true)
  end

  desc "Updates the project version and creates a release PR to be approved"
  lane :prepare_release do

    # pull latest changes and fetch tags
    git_pull

    # get current version
    current_tag = last_git_tag
    version = Semantic::Version.new(current_tag)

    # prompt for bump type
    bump_type = UI.select(
      "Current version is #{current_tag}. What version would you like to create a PR for?",
      ["major", "minor", "patch"]
    )

    # increment version
    case bump_type
    when "major"
      version = version.increment!(:major)
    when "minor"
      version = version.increment!(:minor)
    else
      version = version.increment!(:patch)
    end

    increment_version_number(
      version_number: version.to_string
    )

    # update changelog
    stamp_changelog(
      section_identifier: version.to_string
    )
    sh('swift package generate-xcodeproj')

    branch_name = "release/" + version.to_string
    sh('git checkout -b ' + branch_name)
    sh('git add .')
    sh("[[ -z $(git status -s) ]] || git commit -a -m 'Swift package generate for " + version.to_string + "'")
    sh('git push --set-upstream origin ' + branch_name)
    sh('gh pr create --title "Release PR for ' + version.to_string + '" --base master')
  end

  desc "Create a new tagged release of the library."
  desc "This will bump the Info.plist version, precompile the library, commit and tag the changes, then push up to master."
  lane :tag_release do

    UI.user_error!("You need to provide a Github Personal token via a `GITHUB_TOKEN` environment variable - you can create a new token on Github https://github.com/settings/tokens/new") unless !ENV["GITHUB_TOKEN"].nil?

    # ensure repo is clean
    ensure_git_status_clean

    project_version = get_version_number(xcodeproj: "UIComponents.xcodeproj", target: "UIComponents")
    ensure_git_branch(branch: "^release\/" + project_version.to_string)

    # commit changes
    git_commit(
      path: ["./CHANGELOG.md", "./UIComponents.framework.zip", "./UIComponents*/Info.plist"],
      message: "Bump version to #{project_version} and tagging release"
    )
    push_to_git_remote
    
    # take tag and push to remote
    add_git_tag(tag: project_version.to_string)
    push_git_tags

    # update releases on Github
    changelog = read_changelog(
      section_identifier: "[#{tag}]",
      excluded_markdown_elements: []
    )
    set_github_release(
      repository_name: "hmrc/ios-components",
      api_token: ENV["GITHUB_TOKEN"],
      name: tag.to_string,
      tag_name: tag.to_string,
      description: changelog
    )
  end

end
